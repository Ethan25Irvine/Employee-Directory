{"version":3,"sources":["components/navbar.js","utils/table-data.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["showHint","alert","Navbar","className","href","onClick","data","name","age","job","FilterableTable","require","fields","displayName","inputFilterable","sortable","exactFilterable","Table","namespace","initialSort","Data","noRecordsMessage","noFilteredRecordsMessage","pagersVisible","pagerTitles","first","last","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAEA,SAASA,IACL,OACIC,MAAM,oGAeCC,MAXf,WACI,OACI,6BACI,yBAAKC,UAAU,uDACX,uBAAGA,UAAU,eAAeC,KAAK,aAAjC,oBACA,4BAAQC,QAASL,EAAUG,UAAU,iBAArC,WCaDG,EA1BF,CACT,CAAEC,KAAM,QAASC,IAAK,GAAIC,IAAK,UAC/B,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,UAC9B,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,aAC9B,CAAEF,KAAM,UAAWC,IAAK,GAAIC,IAAK,UACjC,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,WAE9B,CAAEF,KAAM,QAASC,IAAK,GAAIC,IAAK,UAC/B,CAAEF,KAAM,SAAUC,IAAK,GAAIC,IAAK,UAChC,CAAEF,KAAM,SAAUC,IAAK,GAAIC,IAAK,aAChC,CAAEF,KAAM,QAASC,IAAK,GAAIC,IAAK,UAC/B,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,WAE9B,CAAEF,KAAM,SAAUC,IAAK,GAAIC,IAAK,UAChC,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,UAC9B,CAAEF,KAAM,WAAYC,IAAK,GAAIC,IAAK,aAClC,CAAEF,KAAM,SAAUC,IAAK,GAAIC,IAAK,UAChC,CAAEF,KAAM,QAASC,IAAK,GAAIC,IAAK,WAE/B,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,UAC9B,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,UAC9B,CAAEF,KAAM,SAAUC,IAAK,GAAIC,IAAK,aAChC,CAAEF,KAAM,OAAQC,IAAK,GAAIC,IAAK,UAC9B,CAAEF,KAAM,QAASC,IAAK,GAAIC,IAAK,WCpB7BC,EAAkBC,EAAQ,IAY1BC,EAAS,CACX,CAAEL,KAAM,OAAQM,YAAa,UAAWC,iBAAiB,EAAMC,UAAU,GACzE,CAAER,KAAM,MAAOM,YAAa,SAAUC,iBAAiB,EAAME,iBAAiB,EAAMD,UAAU,GAC9F,CAAER,KAAM,MAAOM,YAAa,gBAAiBC,iBAAiB,EAAME,iBAAiB,EAAMD,UAAU,IAwB1FE,MArBf,WACI,OACI,yBAAKd,UAAU,aACX,kBAACO,EAAD,CACIQ,UAAU,SACVC,YAAY,OACZb,KAAMc,EACNR,OAAQA,EACRS,iBAAiB,iCACjBC,yBAAyB,gCACzBC,eAAgB,EAChBC,YAAa,CAAEC,MAAO,QAASC,KAAM,YCnBtCC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,sBAAsBC,UAAWX,MAIzDY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff33e39f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction showHint (){\n    return (\n        alert(\"You can click on an occupation or age and it will show all employees with that age or ocupation.\")\n    );\n}\n\nfunction Navbar() {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary mb-5\">\n                <a className=\"navbar-brand\" href='../app.js'>Employee Tracker</a>\n                <button onClick={showHint} className=\"btn btn-light\">Hint</button>\n            </nav>\n        </div>\n    );\n}\n\nexport default Navbar;","const data = [\n    { name: \"Steve\", age: 24, job: \"Busser\" },\n    { name: \"Gary\", age: 48, job: \"Server\" },\n    { name: \"Greg\", age: 27, job: \"Bartender\" },\n    { name: \"Allegra\", age: 39, job: \"Server\" },\n    { name: \"Jeff\", age: 35, job: \"Manager\" },\n\n    { name: \"Tyler\", age: 27, job: \"Busser\" },\n    { name: \"Taylor\", age: 35, job: \"Server\" },\n    { name: \"Lorina\", age: 24, job: \"Bartender\" },\n    { name: \"Jesus\", age: 39, job: \"Server\" },\n    { name: \"Tona\", age: 48, job: \"Manager\" },\n\n    { name: \"George\", age: 39, job: \"Busser\" },\n    { name: \"Alex\", age: 24, job: \"Server\" },\n    { name: \"Kristina\", age: 35, job: \"Bartender\" },\n    { name: \"Skyler\", age: 27, job: \"Server\" },\n    { name: \"Mikey\", age: 48, job: \"Manager\" },\n\n    { name: \"Sara\", age: 27, job: \"Busser\" },\n    { name: \"Matt\", age: 39, job: \"Server\" },\n    { name: \"Truman\", age: 24, job: \"Bartender\" },\n    { name: \"Josh\", age: 35, job: \"Server\" },\n    { name: \"Felix\", age: 48, job: \"Server\" },\n];\n\nexport default data;","import React from 'react';\nimport Data from '../utils/table-data'\n\nconst FilterableTable = require('react-filterable-table');\n\n// Data for the table to display; can be anything\n// const data = [\n//     { name: \"Steve\", age: 27, job: \"Sandwich Eater\" },\n//     { name: \"Gary\", age: 35, job: \"Falafeler\" },\n//     { name: \"Greg\", age: 24, job: \"Jelly Bean Juggler\" },\n//     { name: \"Jeb\", age: 39, job: \"Burrito Racer\" },\n//     { name: \"Jeff\", age: 48, job: \"Hot Dog Wrangler\" }\n// ];\n\n// Fields to show in the table, and what object properties in the data they bind to\nconst fields = [\n    { name: 'name', displayName: \"Name   \", inputFilterable: true, sortable: true },\n    { name: 'age', displayName: \"Age   \", inputFilterable: true, exactFilterable: true, sortable: true },\n    { name: 'job', displayName: \"Occupation   \", inputFilterable: true, exactFilterable: true, sortable: true }\n];\n\nfunction Table() {\n    return (\n        <div className=\"container\">\n            <FilterableTable\n                namespace=\"People\"\n                initialSort=\"name\"\n                data={Data}\n                fields={fields}\n                noRecordsMessage=\"There are no people to display\"\n                noFilteredRecordsMessage=\"No people match your filters!\"\n                pagersVisible= {false}\n                pagerTitles={{ first: 'First', last: 'Last' }}\n            />\n        </div>\n\n\n    );\n\n\n}\n\nexport default Table","import React from 'react';\nimport Navbar from './components/navbar';\nimport Table from './components/table';\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Table />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n        <Route exact path=\"/Employee-Directory\" component={App} />\n    </Router>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}